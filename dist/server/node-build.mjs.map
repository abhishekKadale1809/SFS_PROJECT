{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/enquiries.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { RequestHandler } from \"express\";\nimport fs from \"fs/promises\";\nimport path from \"path\";\nimport { Enquiry, EnquiryCreateRequest, EnquiryCreateResponse, EnquiryListResponse } from \"@shared/api\";\n\nconst DATA_DIR = path.join(process.cwd(), \"server\", \"data\");\nconst DATA_FILE = path.join(DATA_DIR, \"enquiries.json\");\n\nasync function ensureDataFile() {\n  try {\n    await fs.mkdir(DATA_DIR, { recursive: true });\n    await fs.access(DATA_FILE);\n  } catch {\n    await fs.writeFile(DATA_FILE, JSON.stringify([]));\n  }\n}\n\nasync function readEnquiries(): Promise<Enquiry[]> {\n  await ensureDataFile();\n  try {\n    const raw = await fs.readFile(DATA_FILE, \"utf-8\");\n    const data = JSON.parse(raw);\n    return Array.isArray(data) ? data : [];\n  } catch {\n    return [];\n  }\n}\n\nasync function writeEnquiries(data: Enquiry[]) {\n  await ensureDataFile();\n  await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2));\n}\n\nfunction sanitize(input: string) {\n  return input.trim();\n}\n\nexport const handleEnquiryCreate: RequestHandler = async (req, res) => {\n  const { name, email, phone, message } = req.body as EnquiryCreateRequest;\n  if (!name || !email || !phone || !message) {\n    return res.status(400).json({ error: \"All fields are required\" });\n  }\n\n  const now = new Date().toISOString();\n  const enquiry: Enquiry = {\n    id: `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`,\n    name: sanitize(name),\n    email: sanitize(email),\n    phone: sanitize(phone),\n    message: sanitize(message),\n    createdAt: now,\n  };\n\n  try {\n    const list = await readEnquiries();\n    list.unshift(enquiry);\n    await writeEnquiries(list);\n    const payload: EnquiryCreateResponse = { success: true, enquiry };\n    res.status(201).json(payload);\n  } catch (e) {\n    res.status(500).json({ error: \"Unable to save enquiry\" });\n  }\n};\n\nexport const handleEnquiryList: RequestHandler = async (req, res) => {\n  const key = req.header(\"x-admin-key\");\n  if (!process.env.ADMIN_KEY || key !== process.env.ADMIN_KEY) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n\n  try {\n    const data = await readEnquiries();\n    const payload: EnquiryListResponse = { success: true, data };\n    res.status(200).json(payload);\n  } catch (e) {\n    res.status(500).json({ error: \"Unable to read enquiries\" });\n  }\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleEnquiryCreate, handleEnquiryList } from \"./routes/enquiries\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Enquiries API\n  app.post(\"/api/enquiries\", handleEnquiryCreate);\n  app.get(\"/api/enquiries\", handleEnquiryList);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`ðŸš€ Fusion Starter server running on port ${port}`);\n  console.log(`ðŸ“± Frontend: http://localhost:${port}`);\n  console.log(`ðŸ”§ API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"ðŸ›‘ Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"ðŸ›‘ Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express"],"mappings":"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"}